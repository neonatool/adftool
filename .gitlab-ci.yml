variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - dependencies
  - build
  - pages

cache:
  paths:
    - .apt
    - gmp-6.1.2.tar.lz

before_script:
  - rm -f /etc/apt/apt.conf.d/docker-clean
  - sed "s|@ABS_TOP_SRCDIR@|$PWD|g" gitlab-ci-apt-cache.conf > /etc/apt/apt.conf.d/gitlab-ci-cache
  - mkdir -p .apt/archives/partial
  - apt-get update -y
  - apt-get install -y git
  - git config --global --add safe.directory $PWD

dist:
  image: ubuntu
  stage: dependencies
  script:
    - apt-get install -y git gettext libgmp-dev libhdf5-dev zlib1g-dev autoconf autoconf-archive automake libtool valgrind tar global autopoint make gcc m4 libtinfo5 flex r-base texinfo texlive libpython3-dev pkg-config
    - mkdir -p public
    - export GNULIB_SRCDIR=$PWD/gnulib
    - ./bootstrap --force --skip-po
    - "ls po/*.po | sed 's|.*/||; s|\\.po$||' > po/LINGUAS"
    - mkdir -p build-dist
    - cd build-dist
    - ../configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial
    - make -j
    - mv src/libadftool/libadftool_la-lexer.c ../src/libadftool/
    - make -j distcheck DISTCHECK_CONFIGURE_FLAGS="CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial"
    - cp adftool-*.tar.gz ../public/adftool-latest.tar.gz
    - cp ../.version ../public
  artifacts:
    paths:
      - public

dep_hdf5_emscripten:
  stage: dependencies
  image: emscripten/emsdk
  script:
    - apt-get install -y git python3 gettext autoconf autoconf-archive automake libtool valgrind tar autopoint make gcc m4 libtinfo5 lbzip2
    - mkdir build-hdf5-with-node build-hdf5-emscripten
    - cd hdf5
    - ln -s /usr/bin/libtoolize ./libtoolize
    - cp src/H5make_libsettings.c src/H5make_libsettings-original.c
    - "(echo '#define main true_main' ; cat src/H5make_libsettings.c ../H5make_libsettings_true_main.c) > src/H5make_libsettings.c-stdin"
    - cp src/H5make_libsettings.c-stdin src/H5make_libsettings.c
    - export HDF5_ACLOCAL=$(which aclocal) ; export HDF5_AUTOHEADER=$(which autoheader) ; export HDF5_AUTOMAKE=$(which automake) ; export HDF5_AUTOCONF=$(which autoconf) ; export HDF5_LIBTOOL=$(which libtool) ; export HDF5_M4=$(which m4) ; ./autogen.sh
    - cd ../build-hdf5-with-node
    - emconfigure ../hdf5/configure --enable-build-mode=production CFLAGS="-std=gnu11" LIBS="-lnodefs.js" --disable-tools --disable-tests
    - emmake make -k -j 8 || true
    - cd src
    - "cat libhdf5.settings | node ./H5make_libsettings > ../../hdf5/src/H5lib_settings.c-emscripten"
    - node ./H5detect > ../../hdf5/src/H5Tinit.c-emscripten
    - cd ../../hdf5
    - cp src/H5make_libsettings-original.c src/H5make_libsettings.c
    - cd ../build-hdf5-emscripten
    - emconfigure ../hdf5/configure --enable-build-mode=production --prefix=/emscripten --disable-tools --disable-tests --disable-shared
    - emmake make -j 8 -k || true
    - cp ../hdf5/src/H5lib_settings.c-emscripten ../hdf5/src/H5lib_settings.c
    - cp ../hdf5/src/H5Tinit.c-emscripten ../hdf5/src/H5Tinit.c
    - emmake make -j 8
    - emmake make DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

dep_gmp_emscripten:
  stage: dependencies
  image: emscripten/emsdk
  script:
    - apt-get install -y tar gcc make wget lzip git python3 m4
    - "[ -f gmp-6.1.2.tar.lz ] || wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.lz"
    - tar xf gmp-6.1.2.tar.lz
    - mkdir build-gmp-emscripten
    - cd build-gmp-emscripten
    - emconfigure ../gmp-6.1.2/configure --prefix=/emscripten --disable-assembly --host none
    - emmake make -j 8
    - emmake make DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

dep_gmp_mingw:
  stage: dependencies
  script:
    - apt-get install -y tar make binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 wget lzip gcc m4
    - "[ -f gmp-6.1.2.tar.lz ] || wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.lz"
    - tar xf gmp-6.1.2.tar.lz
    - mkdir build-gmp-mingw
    - cd build-gmp-mingw
    - ../gmp-6.1.2/configure --host=x86_64-w64-mingw32 --prefix=/mingw64 --enable-shared=yes --disable-static
    - make -j 8
    - make DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

build_mingw:
  stage: build
  script:
    - apt-get install -y tar make binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 wine
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-mingw
    - cd build-mingw
    - ../adftool-*/configure CPPFLAGS=-I$PWD/../public/mingw64/include LIBS=-lhdf5 LDFLAGS=-L$PWD/../public/mingw64/lib --enable-relocatable --host=x86_64-w64-mingw32 --prefix=/mingw64 --disable-python
    - make -j
    - make -j DESTDIR=$PWD/../public install
    - cp ../public/mingw64/bin/*.dll .
    - make -j check "LOG_COMPILER = ./libtool --mode=execute wine"
    - LANG=fr_FR.UTF-8 wine ../public/mingw64/bin/adftool --aidez-moi
  artifacts:
    paths:
      - public

build_emscripten:
  stage: build
  image: emscripten/emsdk
  script:
    - apt-get install -y git python3 gettext autoconf autoconf-archive automake libtool valgrind tar autopoint make gcc m4 libtinfo5 lbzip2
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-emscripten
    - cd build-emscripten
    - emconfigure ../adftool-*/configure CPPFLAGS=-I$PWD/../public/emscripten/include LIBS=$PWD/../public/emscripten/lib/libhdf5.a LDFLAGS=-L$PWD/../public/emscripten/lib --disable-relocatable --disable-shared --prefix=/emscripten --disable-python --enable-node=yes
    - emmake make -j
    - emmake make -j DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

build_html:
  stage: build
  script:
    - apt-get install -y gettext libgmp-dev libhdf5-dev zlib1g-dev valgrind tar make gcc libtinfo5 libmpfr-dev texinfo python3 libpython3-dev pkg-config
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-html
    - cd build-html
    - ../adftool-*/configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial --prefix=/ --htmldir=/adftool
    - make -j
    - make -j html
    - make -j DESTDIR=$PWD/../public install-html
  artifacts:
    paths:
      - public

build_pdf:
  stage: build
  script:
    - apt-get install -y gettext libgmp-dev libhdf5-dev zlib1g-dev valgrind tar make gcc libtinfo5 libmpfr-dev texinfo texlive python3 libpython3-dev pkg-config
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-pdf
    - cd build-pdf
    - ../adftool-*/configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial --prefix=/ --pdfdir=/
    - make -j
    - make -j pdf
    - make -j DESTDIR=$PWD/../public install-pdf
  artifacts:
    paths:
      - public

conan:
  stage: build
  script:
    - apt-get install -y python3 python3-pip autoconf autoconf-archive automake libtool pkg-config
    - pip3 install conan
    - tar xf public/adftool-latest.tar.gz
    - mkdir conan-build
    - cd conan-build
    - conan remote add gitlab ${CI_API_V4_URL}/projects/$CI_PROJECT_ID/packages/conan
    - conan create ../adftool-* vkraus+adftool/latest --build missing -c tools.system.package_manager:mode=install
    - CONAN_LOGIN_USERNAME=vkraus CONAN_PASSWORD=${CI_JOB_TOKEN} conan upload adftool/$(cat ../adftool-*/.tarball-version)@vkraus+adftool/latest --all --remote=gitlab

publish_npm:
  stage: pages
  image: node:14
  script:
    - cp -R public/emscripten/share/nodejs/adftool adftool
    - cd adftool
    - sed -i "s/\"adftool\"/\"@${CI_PROJECT_NAMESPACE}\\/${CI_PROJECT_NAME}\"/g" package.json
    - echo "@${CI_PROJECT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
    - echo "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - sed -i 's|^https://|//|g' .npmrc
    - npm publish
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+$/

pages:
  stage: pages
  script:
    - echo "nothing to do"
  artifacts:
    paths:
      - public