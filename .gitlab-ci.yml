variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DEBEMAIL: vivien.kraus@univ-reims.fr
  DEBFULLNAME: Gitlab CI

stages:
  - dependencies
  - build
  - package
  - pages

cache:
  paths:
    - .apt
    - gmp-6.1.2.tar.lz

image: registry.plmlab.math.cnrs.fr/neonatool/adftool-builder:latest

before_script:
  - rm -f /etc/apt/apt.conf.d/docker-clean
  - sed "s|@ABS_TOP_SRCDIR@|$PWD|g" gitlab-ci-apt-cache.conf > /etc/apt/apt.conf.d/gitlab-ci-cache
  - mkdir -p .apt/archives/partial
  - apt-get update -y
  - apt-get install -y git
  - git config --global --add safe.directory $PWD

dist:
  stage: dependencies
  script:
    - apt-get install -y git gettext libgmp-dev libhdf5-dev zlib1g-dev autoconf autoconf-archive automake libtool valgrind tar global autopoint make gcc m4 libtinfo5 flex r-base texinfo texlive libpython3-dev pkg-config emacs check r-base r-cran-rcpp
    - mkdir -p public
    - export GNULIB_SRCDIR=$PWD/gnulib
    - ./bootstrap-bootstrap
    - mkdir -p build-dist
    - cd build-dist
    - ../configure --enable-relocatable --enable-valgrind-tests=yes
    - make -j
    - mv src/libadftool/libadftool_la-lexer.c ../src/libadftool/
    - make -j distcheck
    - cp adftool-*.tar.gz ../public/adftool-latest.tar.gz
    - cp ../.version ../public
  artifacts:
    when: always
    paths:
      - build-dist/config.log
      - build-dist/adftool-*/_build/sub/config.log
      - build-dist/config.h
      - build-dist/adftool-*/_build/sub/config.h
      - build-dist/test-suite.log
      - build-dist/adftool-*/_build/sub/test-suite.log
      - public

check_asan:
  stage: build
  script:
    - apt-get install -y git gettext libgmp-dev libhdf5-dev zlib1g-dev autoconf autoconf-archive automake libtool valgrind tar global autopoint make gcc m4 libtinfo5 flex r-base texinfo texlive libpython3-dev pkg-config emacs check
    - mkdir -p public
    - export GNULIB_SRCDIR=$PWD/gnulib
    - ./bootstrap-bootstrap
    - mkdir -p build-dist
    - cd build-dist
    - ../configure --enable-relocatable --disable-python --disable-r --disable-valgrind-tests "CFLAGS=-g3 -O2 -DFORTIFY_SOURCE=2 -fsanitize=undefined,address -fsanitize-undefined-trap-on-error -Wall -Wextra -static-libasan"
    - make -j
    - make -j check
  artifacts:
    when: always
    paths:
      - build-dist/config.log
      - build-dist/config.h
      - build-dist/test-suite.log
      - public

check_clang:
  stage: build
  image: ubuntu
  script:
    - apt-get install -y git gettext libgmp-dev libhdf5-dev zlib1g-dev autoconf autoconf-archive automake libtool valgrind tar global autopoint make clang m4 libtinfo5 flex r-base r-cran-rcpp texinfo texlive libpython3-dev pkg-config emacs check
    - mkdir -p public
    - export GNULIB_SRCDIR=$PWD/gnulib
    - ./bootstrap-bootstrap
    - mkdir -p build-clang
    - cd build-clang
    - ../configure --enable-relocatable CXX=clang++
    - make -j
    - make -j check
  artifacts:
    when: always
    paths:
      - build-clang/config.log
      - build-clang/config.h
      - build-clang/test-suite.log
      - public

build_mingw:
  stage: build
  script:
    - apt-get install -y tar make binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 wine
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-mingw
    - cd build-mingw
    - ../adftool-*/configure CPPFLAGS="-I$PWD/../public/mingw64/include -I/export/mingw64/include" LDFLAGS="-L$PWD/../public/mingw64/lib -L/export/mingw64/lib" HDF5_CFLAGS=-I/export/mingw64/include 'HDF5_LIBS=-L/export/mingw64/lib -lhdf5' 'CFLAGS=-g3 -O2 -DFORTIFY_SOURCE=2 -Wall -Wextra' --enable-relocatable --host=x86_64-w64-mingw32 --prefix=/mingw64 --disable-python --disable-r
    - make -j
    - mkdir -p $PWD/../public/mingw64/bin/ $PWD/../public/mingw64/include/ $PWD/../public/mingw64/lib/
    - cp /export/mingw64/bin/*.dll $PWD/../public/mingw64/bin/
    - cp -R /export/mingw64/include/* $PWD/../public/mingw64/include/
    - cp -R /export/mingw64/lib/* $PWD/../public/mingw64/lib/
    - cp /export/mingw64/bin/*.dll .
    - make -j DESTDIR=$PWD/../public install
    - cp ../public/mingw64/bin/*.dll .
    - make -j check 'LOG_COMPILER = ./libtool --mode=execute wine'
    - LANG=fr_FR.UTF-8 wine ../public/mingw64/bin/adftool --aidez-moi
  artifacts:
    when: always
    paths:
      - build-mingw/config.log
      - build-mingw/config.h
      - build-mingw/test-suite.log
      - public

build_emscripten:
  stage: build
  script:
    - "source /etc/profile || true"
    - apt-get install -y git python3 gettext autoconf autoconf-archive automake libtool valgrind tar autopoint make gcc m4 libtinfo5 lbzip2
    - tar xf public/adftool-latest.tar.gz
    - cd adftool-*
    - (echo 'extern char const *getprogname (void);' ; cat libprog/error.c) > libprog/true-error.c
    - mv libprog/true-error.c libprog/error.c
    - (echo 'void *rawmemchr (const void *, int);' ; cat libprog/canonicalize-lgpl.c) > libprog/true-canonicalize-lgpl.c
    - mv libprog/true-canonicalize-lgpl.c libprog/canonicalize-lgpl.c
    - cd ..
    - mkdir -p build-emscripten
    - cd build-emscripten
    - emconfigure ../adftool-*/configure CPPFLAGS="-I/export/emscripten/include -I$PWD/../public/emscripten" LIBS="/export/emscripten/lib/libhdf5.a" LDFLAGS="-L/export/emscripten/lib -L$PWD/../public/emscripten/lib" --disable-relocatable --disable-shared --prefix=/emscripten --disable-python --disable-r --enable-node=yes --enable-js-initial-memory=$((256 * 1024 * 1024)) gl_cv_func_dup2_works=no --disable-valgrind-tests CFLAGS="-Oz"
    - emmake make -j
    - emmake make -j DESTDIR=$PWD/../public install
    - cp -R /export/emscripten/include/* $PWD/../public/emscripten/include/
    - cp -R /export/emscripten/lib/* $PWD/../public/emscripten/lib/
  artifacts:
    when: always
    paths:
      - build-emscripten/config.log
      - build-emscripten/config.h
      - build-emscripten/test-suite.log
      - public

build_html:
  stage: build
  script:
    - apt-get install -y gettext libgmp-dev libhdf5-dev zlib1g-dev valgrind tar make gcc libtinfo5 libmpfr-dev texinfo python3 libpython3-dev pkg-config check r-base r-cran-rcpp
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-html
    - cd build-html
    - ../adftool-*/configure --prefix=/ --htmldir=/adftool CPPFLAGS=-I/export/native/include LDFLAGS=-L/export/native/lib
    - make -j
    - make -j html
    - make -j DESTDIR=$PWD/../public install-html
  artifacts:
    paths:
      - public

build_pdf:
  stage: build
  script:
    - apt-get install -y gettext libgmp-dev libhdf5-dev zlib1g-dev valgrind tar make gcc libtinfo5 libmpfr-dev texinfo texlive python3 libpython3-dev pkg-config check r-base r-cran-rcpp
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-pdf
    - cd build-pdf
    - ../adftool-*/configure --prefix=/ --pdfdir=/ CPPFLAGS=-I/export/native/include LDFLAGS=-L/export/native/lib
    - make -j
    - make -j pdf
    - make -j DESTDIR=$PWD/../public install-pdf
  artifacts:
    paths:
      - public

check_npm:
  stage: package
  image: node:14
  script:
    - cp -R public/emscripten/share/nodejs/adftool adftool
    - cd adftool
    - sed -i "s/\"adftool\"/\"@${CI_PROJECT_NAMESPACE}\\/${CI_PROJECT_NAME}\"/g" package.json
    - echo "@${CI_PROJECT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
    - echo "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - sed -i 's|^https://|//|g' .npmrc
    - npm install
    - node test.mjs

publish_npm:
  stage: package
  image: node:14
  script:
    - cp -R public/emscripten/share/nodejs/adftool adftool
    - cd adftool
    - sed -i "s/\"adftool\"/\"@${CI_PROJECT_NAMESPACE}\\/${CI_PROJECT_NAME}\"/g" package.json
    - echo "@${CI_PROJECT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
    - echo "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - sed -i 's|^https://|//|g' .npmrc
    - npm install
    - npm run test
    - npm publish
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+$/

pages:
  stage: pages
  script:
    - echo "nothing to do"
  artifacts:
    paths:
      - public
