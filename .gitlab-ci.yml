variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - dependencies
  - build
  - pages

cache:
  paths:
    - .apt
    - emsdk

before_script:
  - rm -f /etc/apt/apt.conf.d/docker-clean
  - sed "s|@ABS_TOP_SRCDIR@|$PWD|g" gitlab-ci-apt-cache.conf > /etc/apt/apt.conf.d/gitlab-ci-cache
  - mkdir -p .apt/archives/partial
  - apt-get update -y

dist:
  stage: dependencies
  script:
    - apt-get install -y git gettext libhdf5-dev zlib1g-dev autoconf autoconf-archive automake libtool valgrind tar global autopoint make gcc g++ m4 libtinfo5 flex
    - mkdir -p public
    - export GNULIB_SRCDIR=$PWD/gnulib
    - ./bootstrap --force --skip-po
    - mkdir -p build-dist
    - cd build-dist
    - ../configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial
    - make -j
    - mv src/libadftool/libadftool_la-lexer.c ../src/libadftool/
    - make -j distcheck DISTCHECK_CONFIGURE_FLAGS="CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial"
    - cp adftool-*.tar.gz ../public/adftool-latest.tar.gz
  artifacts:
    paths:
      - public

dep_hdf5_emscripten:
  stage: dependencies
  script:
    - apt-get install -y git python3 gettext autoconf autoconf-archive automake libtool valgrind tar autopoint make gcc g++ m4 libtinfo5 lbzip2
    - test -d emsdk || git clone https://github.com/emscripten-core/emsdk.git
    - cd emsdk
    - git pull
    - ./emsdk install latest
    - ./emsdk activate latest
    - source ./emsdk_env.sh
    - cd ..
    - mkdir build-hdf5-with-node build-hdf5-emscripten
    - cd hdf5
    - ln -s /usr/bin/libtoolize ./libtoolize
    - cp src/H5make_libsettings.c src/H5make_libsettings-original.c
    - "(echo '#define main true_main' ; cat src/H5make_libsettings.c ../H5make_libsettings_true_main.c) > src/H5make_libsettings.c-stdin"
    - cp src/H5make_libsettings.c-stdin src/H5make_libsettings.c
    - export HDF5_ACLOCAL=$(which aclocal) ; export HDF5_AUTOHEADER=$(which autoheader) ; export HDF5_AUTOMAKE=$(which automake) ; export HDF5_AUTOCONF=$(which autoconf) ; export HDF5_LIBTOOL=$(which libtool) ; export HDF5_M4=$(which m4) ; ./autogen.sh
    - cd ../build-hdf5-with-node
    - emconfigure ../hdf5/configure --enable-build-mode=production CFLAGS="-std=gnu11" LIBS="-lnodefs.js" --disable-tools --disable-tests
    - emmake make -k -j 8 || true
    - cd src
    - "cat libhdf5.settings | node ./H5make_libsettings > ../../hdf5/src/H5lib_settings.c-emscripten"
    - node ./H5detect > ../../hdf5/src/H5Tinit.c-emscripten
    - cd ../../hdf5
    - cp src/H5make_libsettings-original.c src/H5make_libsettings.c
    - cd ../build-hdf5-emscripten
    - emconfigure ../hdf5/configure --enable-build-mode=production --prefix=/emscripten --disable-tools --disable-tests --disable-shared
    - emmake make -j 8 -k || true
    - cp ../hdf5/src/H5lib_settings.c-emscripten ../hdf5/src/H5lib_settings.c
    - cp ../hdf5/src/H5Tinit.c-emscripten ../hdf5/src/H5Tinit.c
    - emmake make -j 8
    - emmake make DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

build_mingw:
  stage: build
  script:
    - apt-get install -y tar make binutils-mingw-w64-x86-64 g++-mingw-w64 gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 wine
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-mingw
    - cd build-mingw
    - ../adftool-*/configure CPPFLAGS=-I$PWD/../public/mingw64/include LIBS=-lhdf5 LDFLAGS=-L$PWD/../public/mingw64/lib --enable-relocatable --host=x86_64-w64-mingw32 --prefix=/mingw64
    - make -j
    - make bplus_tree_grow_file_example.exe
    - wine bplus_tree_grow_file_example.exe
    - make -j DESTDIR=$PWD/../public install
  artifacts:
    paths:
      - public

build_emscripten:
  stage: build
  script:
    - apt-get install -y git python3 gettext autoconf autoconf-archive automake libtool valgrind tar autopoint make gcc g++ m4 libtinfo5 lbzip2
    - test -d emsdk || git clone https://github.com/emscripten-core/emsdk.git
    - cd emsdk
    - git pull
    - ./emsdk install latest
    - ./emsdk activate latest
    - source ./emsdk_env.sh
    - cd ..
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-emscripten
    - cd build-emscripten
    - emconfigure ../adftool-*/configure CPPFLAGS=-I$PWD/../public/emscripten/include LIBS=$PWD/../public/emscripten/lib/libhdf5.a LDFLAGS=-L$PWD/../public/emscripten/lib --disable-relocatable --disable-shared --prefix=/emscripten
    - emmake make -j
    - emmake make -j DESTDIR=$PWD/../public install
    - ./libtool --tag=CC --mode=link emcc -O3 libadftool.la -o ../public/index.html
    - ls -R .libs
    - cp -R .libs/ ../public
  artifacts:
    paths:
      - public

build_without_mpfr:
  stage: build
  script:
    - apt-get install -y gettext libhdf5-dev zlib1g-dev valgrind tar make gcc g++ libtinfo5
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-without-mpfr
    - cd build-without-mpfr
    - ../adftool-*/configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial
    - make -j
    - make -j check
    - make -j distcheck DISTCHECK_CONFIGURE_FLAGS="CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial"

build_with_mpfr:
  stage: build
  script:
    - apt-get install -y gettext libhdf5-dev zlib1g-dev valgrind tar make gcc g++ libtinfo5 libmpfr-dev
    - tar xf public/adftool-latest.tar.gz
    - mkdir -p build-with-mpfr
    - cd build-with-mpfr
    - ../adftool-*/configure CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial
    - make -j
    - make -j check
    - make -j distcheck DISTCHECK_CONFIGURE_FLAGS="CPPFLAGS=-I/usr/include/hdf5/serial LDFLAGS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial"

pages:
  stage: pages
  script:
    - echo "nothing to do"
  artifacts:
    paths:
      - public